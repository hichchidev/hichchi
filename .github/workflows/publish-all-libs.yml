#file: noinspection UndefinedAction,UndefinedParamsPresent

name: Publish All Libraries

on:
    push:
        branches:
            - main

jobs:
    check-for-tags:
        name: Check for New Tags
        runs-on: ubuntu-latest
        outputs:
            has_new_tags: ${{ steps.check-tags.outputs.has_new_tags }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  filter: tree:0
                  token: ${{ secrets.PAT }}

            - name: Check for new tags
              id: check-tags
              shell: bash
              run: |
                  echo "======================================================================"
                  echo "                   CHECKING FOR NEW TAGS TO PUBLISH                    "
                  echo "======================================================================"

                  # Get all tags that match our release pattern
                  echo "Fetching tags..."
                  git fetch --tags
                  # Updated pattern to match prerelease versions like x.y.z-alpha.n or x.y.z-beta.n
                  ALL_TAGS=$(git tag -l "release/*/*.*.*" "release/*/*.*.*-*.*")

                  # Define our libraries
                  LIBS=("utils" "nest-connector" "nest-core" "nest-crud" "nest-auth" "ngx-utils")

                  # Create a file to track processed tags
                  PROCESSED_TAGS_FILE=".processed_tags"
                  if [ ! -f "$PROCESSED_TAGS_FILE" ]; then
                    echo "Creating new processed tags file..."
                    touch "$PROCESSED_TAGS_FILE"
                  fi

                  echo "----------------------------------------------------------------------"
                  echo "Checking each library for new tags..."
                  echo "----------------------------------------------------------------------"

                  # Check for new tags that haven't been processed yet
                  NEW_TAGS_FOUND=false
                  for lib in "${LIBS[@]}"; do
                    echo "Checking $lib..."
                    LATEST_TAG=$(echo "$ALL_TAGS" | grep "release/$lib/" | sort -V | tail -n 1)
                    if [ -n "$LATEST_TAG" ] && ! grep -q "$LATEST_TAG" "$PROCESSED_TAGS_FILE"; then
                      NEW_TAGS_FOUND=true
                      echo "‚úÖ Found new tag: $LATEST_TAG"
                    else
                      echo "‚ùå No new tags for $lib"
                    fi
                  done

                  echo "----------------------------------------------------------------------"

                  # Set output for next job
                  echo "has_new_tags=$NEW_TAGS_FOUND" >> $GITHUB_OUTPUT

                  if [ "$NEW_TAGS_FOUND" = false ]; then
                    echo "======================================================================"
                    echo "               NO NEW TAGS FOUND. WORKFLOW WILL SKIP PUBLISHING.      "
                    echo "======================================================================"
                  else
                    echo "======================================================================"
                    echo "              NEW TAGS FOUND. WORKFLOW WILL CONTINUE WITH PUBLISHING. "
                    echo "======================================================================"
                  fi

    publish-packages:
        name: Build and Publish Packages
        needs: check-for-tags
        if: needs.check-for-tags.outputs.has_new_tags == 'true'
        runs-on: ubuntu-latest
        permissions:
            contents: read
            id-token: write # needed for provenance data generation
        timeout-minutes: 15
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  filter: tree:0
                  token: ${{ secrets.PAT }}

            - name: Install Node
              uses: actions/setup-node@v4
              with:
                  node-version: 22.16.0
                  registry-url: https://registry.npmjs.org/

            - name: Install dependencies
              run: |
                  echo "======================================================================"
                  echo "                     INSTALLING DEPENDENCIES                           "
                  echo "======================================================================"
                  npm install --ignore-scripts --no-audit --no-fund --verbose
              shell: bash

            - name: Print Environment Info
              run: |
                  echo "======================================================================"
                  echo "                     ENVIRONMENT INFORMATION                           "
                  echo "======================================================================"
                  npx nx report
              shell: bash

            - name: Lint ngx packages with dependency checks
              run: |
                  echo "======================================================================"
                  echo "                   LINTING PACKAGES WITH DEPENDENCY CHECKS             "
                  echo "======================================================================"
                  npx nx run-many -t lint-fix-deps --projects='libs/ngx-*'
              shell: bash

            - name: Lint all packages
              run: |
                  echo "======================================================================"
                  echo "                           LINTING PACKAGES                           "
                  echo "======================================================================"
                  npx nx run-many -t lint --projects='libs/*'
              shell: bash

            - name: Build packages
              run: |
                  echo "======================================================================"
                  echo "                        BUILDING PACKAGES                              "
                  echo "======================================================================"
                  npx nx run-many -t build --projects="libs/*"
              shell: bash

            - name: Detect and publish new tags
              shell: bash
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
                  NPM_CONFIG_PROVENANCE: true
              run: |
                  echo "======================================================================"
                  echo "                  PUBLISHING PACKAGES WITH NEW TAGS                    "
                  echo "======================================================================"

                  # Get all tags that match our release pattern
                  git fetch --tags
                  # Updated pattern to match prerelease versions like x.y.z-alpha.n or x.y.z-beta.n
                  ALL_TAGS=$(git tag -l "release/*/*.*.*" "release/*/*.*.*-*.*")

                  # Define our libraries
                  LIBS=("utils" "nest-connector" "nest-auth" "nest-crud" "ngx-utils" "nest-core")

                  # Create a file to track processed tags
                  PROCESSED_TAGS_FILE=".processed_tags"
                  if [ ! -f "$PROCESSED_TAGS_FILE" ]; then
                    touch "$PROCESSED_TAGS_FILE"
                  fi

                  # For each library, check for new tags
                  for lib in "${LIBS[@]}"; do
                    echo "----------------------------------------------------------------------"
                    echo "Checking for new $lib tags..."
                    # Get the latest tag for this library
                    LATEST_TAG=$(echo "$ALL_TAGS" | grep "release/$lib/" | sort -V | tail -n 1)

                    if [ -n "$LATEST_TAG" ]; then
                      # Check if this tag has been processed already
                      if ! grep -q "$LATEST_TAG" "$PROCESSED_TAGS_FILE"; then
                        echo "‚úÖ Found new tag: $LATEST_TAG"
                        echo ""

                        # Publish the package
                        echo "üöÄ Publishing $lib..."

                        # Check if this is a prerelease version (contains - in version)
                        VERSION=$(echo "$LATEST_TAG" | sed 's/release\/[^\/]*\///' | sed 's/^v//')
                        if [[ "$VERSION" == *"-alpha"* ]]; then
                          echo "üì¶ Publishing as alpha version..."
                          npx nx release publish --projects=$lib --tag=alpha
                        elif [[ "$VERSION" == *"-beta"* ]]; then
                          echo "üì¶ Publishing as beta version..."
                          npx nx release publish --projects=$lib --tag=beta
                        else
                          echo "üì¶ Publishing as latest version..."
                          npx nx release publish --projects=$lib
                        fi

                        # Mark this tag as processed
                        echo "$LATEST_TAG" >> "$PROCESSED_TAGS_FILE"
                        echo "‚úÖ $lib published successfully!"
                      else
                        echo "‚è≠Ô∏è Tag $LATEST_TAG already processed. Skipping."
                      fi
                    else
                      echo "‚ùå No tags found for $lib"
                    fi
                    echo ""
                  done

                  echo "----------------------------------------------------------------------"
                  echo "Updating processed tags file..."

                  # Commit the processed tags file if there are changes
                  if git diff --quiet "$PROCESSED_TAGS_FILE"; then
                    echo "No changes to processed tags file."
                  else
                    git config --local user.email "github-actions@github.com"
                    git config --local user.name "GitHub Actions"
                    git add "$PROCESSED_TAGS_FILE"
                    git commit -m "Update processed tags [skip ci]"
                    git push
                    echo "‚úÖ Processed tags file updated and committed."
                  fi

                  echo "======================================================================"
                  echo "                        WORKFLOW COMPLETED                             "
                  echo "======================================================================"
